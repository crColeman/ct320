#!/bin/bash
#Author: Cody Coleman

# sizes takes, as arguments, at least one limit file, as described below.                 

#     First line will be one of:
#         -an absolute path starting with /
#         -an absolute path starting with ~username
#         -a username, indicating to check that user’s home directory.
#     Subsequent lines will be one of, in no particular order (at least one needs to be present):
#         -t>value (indicating a minimum total size, in bytes, of all plain files)
#         -t<value (indicating a maximum total size, in bytes, of all plain files)
#         -n>value (indicating a minimum number of plain files)
#         -n<value (indicating a maximum number of plain files)
#     A value will be one of these appallingly non-standard forms:
#         -a simple integer
#         -integer D
#         -integer S
#         -integer H
#         -integer M
#         -integer B
#         -D, S, H, M, and B mean exactly 12, 20, 10², 10⁶, and 10⁹.
#         -Either upper or lower case is acceptable.
#     For example, n<3h means that the number of plain files must be less than three hundred.
#     Similarly, t>23M means that the total size of all plain files must be greater than 23 000 000.
#     Empty lines in the limit file are ignored.
#     Comment lines beginning with # in the first column are ignored.

# -Comment & empty lines may be anywhere in the limit file, even before the “first” line.
# -No matter what style the first line of the limit file takes, the message for exceeding a limit must start with an absolute directory.
# -The message for exceeding a limit must include the size in its original form, e.g., 12398M, not 12398000000
# -File sizes and total sizes may be up to one trillion bytes.
# -Produce multiple messages if multiple constraints are violated.
# -Produce an error message to stderr, containing the real program name, and terminate, if:
#     no arguments are given
#     non-existent user in a limit file
#     bad directory in a limit file
#     a limit file is bad in any other way, including being syntactically incorrect, not existing, being unreadable, etc.
# -A “plain file” is a plain old data file. It is not a:
#     directory
#     symbolic link
#     socket
#     named pipe
#     etc.
# -Ignore all non-plain files, including symbolic links.
# -The number & total refer to all plain files in the directory hierarcy, including files in subdirectories, sub-sub-directories, etc.
# -You may not use any existing limit program, such as quota or quot. In general, you may not use any program that solves the majority of the assignment for you.
# -You may use the du, ls, and find programs.
function parseFile() {
    local declare raw_file_contents
    while IFS= read -r line;
    do
        if [[ ! -z "$line" ]] && [[ ! $line == "#"* ]];
        then
            raw_file_contents+=( "$line" )
        fi
        
    done < "$1"
    firstLine ${raw_file_contents[0]}
    unset raw_file_contents[0]
    
    for line in ${raw_file_contents[@]};
    do
        
        local regex_max_size='^\bt<\b[0-9]+[DdSsHhMmBb]{1}$'
        local regex_min_size='^\bt>\b[0-9]+[DdSsHhMmBb]{1}$'
        local regex_raw_max_files='^\bn<\b[0-9]+[DdSsHhMmBb]{1}$'
        local regex_raw_min_files='^\bn>\b[0-9]+[DdSsHhMmBb]{1}$'
        local line_Value="$(echo $line | tr -cd '[[:digit:]]' )"
        local multiplyer="${line: -1}"
        
        if [[ $line =~ $regex_max_size ]]
        then
            #echo $line;
            raw_max_file_size=$line_Value
            raw_max_file_size_multiplyer=$multiplyer
            
            
            
        elif [[ $line =~ $regex_min_size ]]
        then
            raw_min_file_size=$line_Value
            raw_min_file_size_multiplyer=$multiplyer
            
        elif [[ $line =~ $regex_raw_max_files ]]
        then
            raw_max_num_files=$line_Value
            raw_max_num_files_multiplyer=$multiplyer
            
        elif [[ $line =~ $regex_raw_min_files ]]
        then
            raw_min_num_files=$line_Value
            raw_min_num_files_multiplyer=$multiplyer
        else
            echo "Error: Invalid Limit Requirement: $line: $0" >&2
            exit 1
        fi
    done
}


function firstLine() {
    local ARG="$1"
    # echo $ARG
    username_regex='^\b~\b*[^/]$'
    if id $ARG >/dev/null 2>&1
    then
        absolute_path="/home/$ARG"
        return
    elif [[ "${ARG:0:2}" == ~[/a-z] ]]
    then
        raw_username="$(echo "$ARG" | cut -d'/' -f1 )"
        clean_username="${raw_username:1}"
        
        if id $clean_username >/dev/null 2>&1
        then
            clean_username="/home/$clean_username"
            path=${ARG#$raw_username/}
            if [[ -d "$clean_username/$path" ]]
            then
                absolute_path=$clean_username/$path
                return
            fi
        else
            echo "Error: Invalid Username: $0" >&2
            exit 1
        fi
        
    fi
    if [[ "${ARG:0:1}" == /* || "${ARG:0:2}" == ~[/a-z] ]]
    then
        if [[ -d "$ARG" ]];
        then
            absolute_path=$ARG;
            return
        else
            echo "$ARG: Not A Valid Directory" >&2
            exit 1
        fi
    fi
    
}

function directoryEnforcement() {
    let x=0
}

multiplyerProduct() {
    
    case "$1" in
        [Dd] )
        ;;
        [Ss] )
        ;;
        [Hh] )
        ;;
        [Mm] )
        ;;
        [Bb] )
        ;;
        *)
            # echo "Error: Invalid Limit Requirement: $line: $0" >&2
            # exit 1
    esac
}

function multipleCalculations {
    local multiplyer=0
    if [[ "$raw_max_file_size_multiplyer" != "" ]]
    then
        case $raw_max_file_size_multiplyer in
            [Dd] )
                multiplyer=12
            ;;
            [Ss] )
                multiplyer=20
            ;;
            [Hh] )
                multiplyer=100
            ;;
            [Mm] )
                let multiplyer=10**6
            ;;
            [Bb] )
                let multiplyer=10**9
            ;;
            *)
                echo "Error: Invalid Limit Requirement: $line: $0" >&2
                exit 1
        esac
        let final_max_file_size=($raw_max_file_size*multiplyer);
        echo $final_max_file_size
    fi
    
    if [[ "$raw_min_file_size_multiplyer" != "" ]]
    then
        case $raw_min_file_size_multiplyer in
            [Dd] )
                multiplyer=12
            ;;
            [Ss] )
                multiplyer=20
            ;;
            [Hh] )
                multiplyer=100
            ;;
            [Mm] )
                let multiplyer=10**6
            ;;
            [Bb] )
                let multiplyer=10**9
            ;;
            *)
                echo "Error: Invalid Limit Requirement: $line: $0" >&2
                exit 1
        esac
        let final_min_file_size=($raw_min_file_size*multiplyer);
        echo $final_min_file_size
    fi
    
    if [[ "$raw_max_num_files_multiplyer" != "" ]]
    then
        case $raw_max_num_files_multiplyer in
            [Dd] )
                multiplyer=12
            ;;
            [Ss] )
                multiplyer=20
            ;;
            [Hh] )
                multiplyer=100
            ;;
            [Mm] )
                let multiplyer=10**6
            ;;
            [Bb] )
                let multiplyer=10**9
            ;;
            *)
                echo "Error: Invalid Limit Requirement: $line: $0" >&2
                exit 1
        esac
        let final_max_num_files=($raw_max_num_files*multiplyer);
        echo $final_max_num_files
    fi
    
    if [[ "$raw_min_num_files_multiplyer" != "" ]]
    then
        case $raw_min_num_files_multiplyer in
            [Dd] )
                multiplyer=12
            ;;
            [Ss] )
                multiplyer=20
            ;;
            [Hh] )
                multiplyer=100
            ;;
            [Mm] )
                let multiplyer=10**6
            ;;
            [Bb] )
                let multiplyer=10**9
            ;;
            *)
                echo "Error: Invalid Limit Requirement: $line: $0" >&2
                exit 1
        esac
        let final_min_num_files=($raw_min_num_files*multiplyer);
        
    fi
    
}

declare -a file_names_array

if [[ $# < 1 ]]
then
    echo "Error: No File Argument Passed: $0" >&2
    exit 1
else
    #Error checking goes here
    
    index=0
    declare -a total_size
    declare -a num_files
    
    for file in $@;
    do
        file_names_array[$index]=$file
        let "index=$(($index+1))"
    done
    
    
    
    for fileName in ${file_names_array[@]};
    do
        raw_max_file_size=0pathnames
        raw_max_file_size_mpathnamesr=""
        raw_min_file_size=0pathnames
        raw_min_file_size_mpathnamesr=""
        raw_max_num_files=0pathnames
        raw_max_num_files_multiplyer=""
        raw_min_num_files=0
        raw_min_num_files_multiplyer=""
        absolute_path=""
        final_max_file_size=0
        final_min_file_size=0
        final_max_num_files=0
        final_min_num_files=0
        
        
        parseFile $fileName
        echo $absolute_path
        echo Max File Size: $raw_max_file_size
        echo Max File Multiplyer: $raw_max_file_size_multiplyer
        echo Min File Size: $raw_min_file_size
        echo Min File Multiplyer: $raw_min_file_size_multiplyer
        echo Max Number of Files: $raw_max_num_files
        echo Max Number of Files Multiplyer: $raw_max_num_files_multiplyer
        echo min Number of Files: $raw_min_num_files
        # echo Min Num of Files Multiplyer: $raw_min_num_files_multiplyer
        multipleCalculations
        cd $absolute_path
        echo here
       yourfilenames=`find -type f -not -name ".*" -printf '%P\n'`
        echo here
        for eachfile in $yourfilenames
        do

             size=`du "$eachfile" | cut -f1`
             echo $size
        done
        
        
        
        
    done
fi


